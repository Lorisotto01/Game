# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- media

variables:
  AgentImage: "windows-2022"
  system.debug: true #Setting debug to true will add extra output to the logs but can be useful while trying to determine full reason for failures
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'Simple3D'
  assets: 'Assets/'
  jsonData: 'JSON'
  videoRes: '3840x2160'
parameters:
  - name: assets
    type: object
    default:
      dds: 5
      mp4: [1, '3840x2160']
      wav: 3
  - name: artifacts
    type: object
    default:
      iso: 4780
      zip: 4780

pool:
  vmImage: $(AgentImage)
  demands:
  - msbuild
  - visualstudio

jobs:
- job: 'PreBuild'
  displayName: 'PreBuild'
  steps:
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec:
      checkLatest: true
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      feedsToUse: 'select'

- job: 'Build'
  displayName: 'Build'
  dependsOn: 'PreBuild'

- task: VSBuild@1
  displayName: 'VS Build'
  inputs:
    vsversion: 17.0
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\$(artifactName).zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- job: 'ConsistancyCheck'
  displayName: 'Consistancy Check'
  dependsOn:
    - PreBuild
    - Build

  steps:
  - ${{ each pair in parameters.assets }}:
    - template: templates/basicChecks.yml
      parameters:
        job: 'count'
        content: ${{ pair.key }}
        targetValue: ${{ pair.value }}
      displayName: 'check ${{ pair.key }} ${{ name }}'
      groupID: 1

  - template: templates/basicChecks.yml
    parameters:
      job: 'quality'
      content: '$(assets)trailer.mp4'
      targetValue: ${{videoRes}}
    displayName: 'check video ${{ name }}'
    groupID: 1

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)' # default: $(Build.BinariesDirectory)
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
      replaceExistingArchive: true
    displayName: '.zip creation'
    groupID: 2

  - powershell: oscdimg -dn $(Build.SourcesDirectory) $(Build.ArtifactStagingDirectory)/$(artifactName).iso
    displayName: 'iso creation'
    groupID: 2

  - ${{ each pair in variables.artifacts }}:
    - template: templates/basicChecks.yml
      parameters:
        job: 'size'
        directory: '$(Build.ArtifactStagingDirectory)/$(artifactName).'
        content: ${{ pair.key }}
        targetValue: ${{ pair.value }}
      displayName: 'check ${{ pair.key }} ${{ name }}'
      groupID: 3

  - powershell: |
      fail=$(grep "Failed" assetsCheck.txt)
      Write-Host "##vso[task.setvariable variable=fail]$fail"
  - ${{ if eq($(fail), 0) }}:
    - powershell: |
        mail -s "Assets check result" casandra.cubreacov@gmail.com <<< assetCheck.txt
        error
    displayName: 'Send assets check results'

- job: 'Publish'
  displayName: 'Publish'
  dependsOn: 'ConsistancyCheck'
  condition: succeeded()
  steps:

  - task: PublishBuildArtifacts@1 # recommendded for faster performance
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(artifactName)

# - job: 'Deploy'
#   displayName: 'Deploy'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/deploy')) #or compare dates (wanted vs pipeline)
#   steps:

  # - task: SteamPublish@3
  #   displayName: 'Steam Publish'
  #   name: "Simple3DGameDX"
  #     appid: 202930
  #     disk_size_mb: '$(zipSize)'
  #   targetFolder: '$(Build.ArtifactStagingDirectory)/*.zip'
  #   inputs:
  #     username: $USER
  #     password: $PASS
  #     description: '$(jsonData)/description.json'

  # https://stackoverflow.com/questions/684015/how-can-i-get-the-resolution-width-and-height-for-a-video-file-from-a-linux-co
  # - task: PublishVideo@2
  #   displayName: 'Realesing video in 4K to YouTube'
  #   videos:
  #     title: 'Best Game of the Year'
  #     file:  $(assets)/trailer.mp4
  #     description: $(jsonData)/description.json
  #     category: Music
  #     privacy: private
  #   secrets_path: $(jsonData)/client_secrets.json
  #   credentials_path:  $(jsonData)/credentials.json
  #   condition: and(succeeded(), eq(variables.videoRes),  3840x2160))



