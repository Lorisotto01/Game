parameters:
  directory: 'Assets'
  job: 'count'
  content: ''
  targetValue: ''

steps:
- ${{ if eq(parameters['job'], 'count') }}:
  - powershell: |
      $env:PRESENTVALUE=(ls ${{ parameters.directory }}/*.${{ parameters.content }} | wc -l)
    displayName: 'Get ${{ parameters.content }} ${{ parameters.job }} value'
- ${{ elseif eq(parameters['job'], 'size') }}:
  - powershell: $env:PRESENTVALUE=$(du -cm ${{ parameters.directory }}/*.${{ parameters.content }}  | tail -1 | awk '{print $1}')
    displayName: 'Get ${{ parameters.content }} ${{ parameters.job }} value'
- ${{ elseif eq(parameters['job'], 'quality') }}:
  - powershell: $env:PRESENTVALUE=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 ${{ parameters.content }})
    displayName: 'Get ${{ parameters.content }} ${{ parameters.job }} value'
- ${{ else }}:
  - powershell: |
      Write-Host "##vso[task.logissue type=error;]Wrong template parameter JOB"
      Write-Host "##vso[task.complete result=Failed;]"

- powershell: |
      Write-Host "##vso[task.setvariable variable=presentValue]$env:PRESENTVALUE"
      "${{ parameters.content }}" | Out-File -FilePath ${{ parameters.directory }}/assetsCheck.txt -Append
  displayName: 'Set ${{ parameters.content }} ${{ parameters.job }} value'

- ${{ if eq(variables['presentValue'], parameters['target']) }}:
  - powershell: |
      "${{ parameters.job }}    Succeded" | Out-File -FilePath ${{ parameters.directory }}/assetsCheck.txt -Append
    displayName: 'Write succeded result'
- ${{ else }}:
  - powershell: |
      "${{ parameters.job }}    Failed" | Out-File -FilePath ${{ parameters.directory }}/assetsCheck.txt -Append
    displayName: 'Write failed result'
- powershell: cat Assets/assetsCheck.txt
