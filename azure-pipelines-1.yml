# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- windows

# name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

variables:
  AgentImage: "windows-latest"
  system.debug: true #Setting debug to true will add extra output to the logs but can be useful while trying to determine full reason for failures
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'Simple3D'
  assets: 'Assets'
  jsonData: 'JSON'
  artifactSize: 4780
  videoRes: '3840x2160'

  # extensions:
  #   - {name: "wav", count: 2}
  #   - {name: "dds", count: 5}
  #   - {name: "mpeg", count: 3}

pool:
  vmImage: $(AgentImage)
  demands:
  - msbuild
  - visualstudio
  # - oscdimg
# https://answers.microsoft.com/en-us/windows/forum/all/where-is-oscdimgexe/b6ccd22e-b478-4222-b370-d5aaf021f575
# https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/oscdimg-command-line-options?view=windows-11
  # - DirectX
# https://docs.microsoft.com/en-us/windows/win32/dxtecharts/directx-setup-for-game-developers

jobs:
- job: 'BuildAndTest' #Job name cannot have spaces
  displayName: 'Build and Test'
  steps:
  # - task: NuGetCommand@2
  # inputs:
  #   command: 'restore'
  #   restoreSolution: '**/*.sln'
  #   feedsToUse: 'select'

  - bash: dotnet add package Microsoft.DXSDK.D3DX --version 9.29.952.8
    displayName: 'get directX'
  - bash: dotnet add package DiscUtils.Iso9660 --version 0.16.13
    displayName: 'get iso creator'

  - task: VSBuild@1 #as well automatically restores packages (alternative to nuget/dotnet restore)
    displayName: 'VS Build & Package restore'
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  - task: VSTest@2
    displayName: 'VS Test'
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

- job: 'ConsistancyCheck'
  displayName: 'Consistancy Check'
  dependsOn: 'BuildAndTest'
  variables:
    DVDsize: 4780

  steps:
  - template: templates/assetsControl.yml
    parameters:
      fileExtention: 'wav'
      count: 2

  - template: templates/assetsControl.yml
    parameters:
      fileExtention: 'dds'
      count: 5

  - template: templates/assetsControl.yml
    parameters:
      fileExtention: 'mp4'
      count: 1

  - bash: |
      videoRes=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 $(Build.SourcesDirectory)/$(Assets)/*)
      if ($videoRes != $VIDEORES); then
        echo "mp4Res    Failed" >> assetCheck.txt
      else
        echo "mp4Res    Succeded" >> assetCheck.txt
      fi
    displayName: 'trailer resolution check'


  - bash: |
      if (grep "Failed" assetsCheck.txt ||
      then mail -s "Assets check result" amico@libero.it <<< assetCheck.txt
      fi
    displayName: 'send mail with assets check results'

  #set size flag for the full source code
  - bash: |
      imagesize=$(du -c | tail -1 | awk '{x = $1 / 1024; if (x > $(DVDsize)) {print -1} else {print 0}}')
      echo "##vso[task.setvariable variable=artifactSize]$imagesize"
    displayName: 'iso source files size check'
  #iso creation with condition
  # - bash: |
      # mkisofs -o $(Build.SourcesDirectory)/$(artifactName).iso -J -R -l $(Build.SourcesDirectory)
  - bash: |
      curl.exe -o oscdimg.zip http://www.sevenforums.com/attachments/general-discussion/32382d1256189124-make-bootable-iso-student-d-l-oscdimg.zip
      OSCDIMG.exe -dn $(Build.SourcesDirectory) $(artifactName)
    displayName: 'iso creation'
    condition: and(succeeded(), eq(variables.imageSize, 0))

- job: 'Publish'
  displayName: 'Publish .iso Artifacts'
  dependsOn: 'ConsistancyCheck'
  steps:
  - task: PublishBuildArtifacts@1 # recommendded for faster performance
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: $(artifactName).iso

#https://medium.com/@douglaslassance/automating-unreal-engine-project-builds-for-steam-using-github-4f164c803df0

  # - bash: |
  #     imagesize=$(du $(Build.ArtifactStagingDirectory)/$(artifactName).zip | awk '{print $1}')
  #     echo "##vso[task.setvariable variable=artifactSize]$imagesize"

  - task: ArchiveFiles@2.
    displayName: 'Zip Artifact for Steam'
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

  - bash:
      zipSize=$(du -sh $(Build.ArtifactStagingDirectory)/*.zip | awk '{print $1}')

          # - task: SteamPublish@3
          #   displayName: 'Steam Publish'
          #   name: "Simple3DGameDX"
          #     appid: 202930
          #     disk_size_mb: '$(zipSize)'
          #   targetFolder: '$(Build.ArtifactStagingDirectory)/*.zip'
          #   inputs:
          #     username: $USER
          #     password: $PASS
          #     description: '$(jsonData)/description.json'
    # group: 1

  # https://stackoverflow.com/questions/684015/how-can-i-get-the-resolution-width-and-height-for-a-video-file-from-a-linux-co

          # - task: PublishVideo@2
          #   displayName: 'Realesing video in 4K'
          #   videos:
          #     title: 'Best Game of the Year'
          #     file:  $(assets)/Trailer.mp4
          #     description: $(jsonData)/description.json
          #     category: Music
          #     privacy: private
          #   secrets_path: $(jsonData)/client_secrets.json
          #   credentials_path:  $(jsonData)/credentials.json
          #   condition: and(succeeded(), eq($(videoRes),  3840x2160)) # controllo per vedere se la risoluzione Ã¨ quella desiderata



