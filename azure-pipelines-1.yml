# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- windows

# name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

variables:
  AgentImage: "windows-latest"
  system.debug: true #Setting debug to true will add extra output to the logs but can be useful while trying to determine full reason for failures
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'Simple3D'
  artifactSize: 4780
  # extensions:
  #   - {name: "wav", count: 2}
  #   - {name: "dds", count: 5}
  #   - {name: "mpeg", count: 3}

pool:
  vmImage: $(AgentImage)
  demands:
  - msbuild
  - visualstudio
  # - oscdimg
  - DirectX

jobs:
- job: 'BuildAndTest' #Job name cannot have spaces
  displayName: 'Application Build'
  steps:
  - script: #scarica e instala directX
  - task: VSBuild@1 #as well automatically restores packages (alternative to nuget/dotnet restore)
    displayName: 'VS Build & Package restore'
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  - task: VSTest@2
    displayName: 'VS Test'
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

- job: 'ConsistancyCheck'
  displayName: 'Application Consistancy Check'
  dependsOn: 'BuildAndTest'
  variables:
    DVDsize: 4780

  steps:
  - template: templates/assetsControl.yml
    parameters:
      fileExtention: 'wav'
      count: 2

  - template: templates/assetsControl.yml
    parameters:
      fileExtention: 'dds'
      count: 5

  - bash: |
      if grep "Failed" assetsCheck.txt
      then mail -s "Assets check result" amico@libero.it <<< assetCheck.txt
      fi
    displayName: 'send mail with assets check result'

  #set size flag for the full source code
  - bash: |
      imagesize=$(du -c | tail -1 | awk '{x = $1 / 1024; if (x > $(DVDsize)) {print -1} else {print 0}}')
      echo "##vso[task.setvariable variable=artifactSize]$imagesize"
    displayName: 'iso source files size check'
  #iso creation with condition
  # - bash: |
      # mkisofs -o $(Build.SourcesDirectory)/$(artifactName).iso -J -R -l $(Build.SourcesDirectory)
  - bash: |
      curl.exe -o oscdimg.zip http://www.sevenforums.com/attachments/general-discussion/32382d1256189124-make-bootable-iso-student-d-l-oscdimg.zip
      OSCDIMG.exe -dn $(Build.SourcesDirectory) $(artifactName)
    displayName: 'iso creation'
    condition: and(succeeded(), eq(variables.imageSize, 0))

- job: 'Publish'
  displayName: 'Publish Build Artifacts'
  dependsOn: 'ConsistancyCheck'
  steps:
  - task: PublishBuildArtifacts@1 # recommendded for faster performance
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: $(artifactName).iso

#https://medium.com/@douglaslassance/automating-unreal-engine-project-builds-for-steam-using-github-4f164c803df0

  # - bash: |
  #     imagesize=$(du $(Build.ArtifactStagingDirectory)/$(artifactName).zip| awk '{print $1}')
  #     echo "##vso[task.setvariable variable=artifactSize]$imagesize"

  # - task: SteamPublish@3
  #   displayName: 'Publish Steam'
  #   name: "Simple3DGameDX"
  #     appid: 202930
  #     disk_size_mb: '$(artifactSize)'
  #   targetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
  #   inputs:
  #     username: $USER
  #     password: $PASS
  #     description: '**/description.json'



